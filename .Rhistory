library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
library('ncvreg')
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
ff<-function(p){
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
runtime<-rep(0,3);
## glmnet
if (p<1000){
runtime[1]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =sqrt(2*log(p)/n));})
lambda=obj$lambda
## ncvreg
runtime[2]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj1<-ncvreg(Xfull[,-1],Y,penalty ='lasso',lambda=lambda,family='gaussian',returnX =FALSE)})}
## HiQR
runtime[3]=ttime({obj5=hiqr(X0,Y,type=1,nlambda=50,lambda.min.ratio =sqrt(2*log(p)/n),rho=p/100)})
print(c(p,runtime,sum(obj5$niter)))
return(runtime)
}
pp<-c(100,200,400,800,1200)
Re<-sapply(rep(pp,each=1),ff)
Re
saveRDS(Re,file='time-tab2.rds')
##time performance of HiQR
rm(list=ls())
library(HiQR)
setwd('~/Dropbox/Share/HQR_ADMM/sim')
set.seed(501)
library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
library('ncvreg')
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
p=800
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
runtime<-rep(0,3);
## glmnet
if (p<1000){
runtime[1]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =sqrt(log(p)/n));})
lambda=obj$lambda
## ncvreg
runtime[2]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj1<-ncvreg(Xfull[,-1],Y,penalty ='lasso',lambda=lambda,family='gaussian',returnX =FALSE)})}
## HiQR
runtime[3]=ttime({obj5=hiqr(X0,Y,type=1,nlambda=50,err_abs =1e-04,lambda.min.ratio =sqrt(log(p)/n),rho=5)})
print(c(p,runtime))
sum(obj5$niter)
## check the estimation
# NN=length(lambda)
# for (k in 1:NN)
# {
#   A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
#   A1=(A1+t(A1))/2
#   A3=matrix(obj1$beta[,k],nrow =p)
#   A3=(A3+t(A3))/2
# A2=as.matrix(obj_new$Omega[[k]])
# print(c(max(abs(A1-A2)),max(abs(A1-A3))))
# }
# NN=length(obj5$lambda)
# for (k in 1:NN)
#    {
#   #   A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
#   #   A1=(A1+t(A1))/2
#   #A3=matrix(obj5$beta[,k],nrow =p)
#   #   A3=(A3+t(A3))/2
#   A2=as.matrix(obj5$Omega[[k]])
#   print(nnzero(A2))
#   }
runtime[3]=ttime({obj5=hiqr(X0,Y,type=1,nlambda=50,err_abs =1e-04,lambda.min.ratio =sqrt(log(p)/n),rho=10)})
print(c(p,runtime))
sum(obj5$niter)
##time performance of HiQR
rm(list=ls())
library(HiQR)
setwd('~/Dropbox/Share/HQR_ADMM/sim')
set.seed(501)
library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
library('ncvreg')
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
p=1000
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
runtime<-rep(0,3);
## glmnet
if (p<100){
runtime[1]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =sqrt(log(p)/n));})
lambda=obj$lambda
## ncvreg
runtime[2]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj1<-ncvreg(Xfull[,-1],Y,penalty ='lasso',lambda=lambda,family='gaussian',returnX =FALSE)})}
## HiQR
runtime[3]=ttime({obj5=hiqr(X0,Y,type=1,nlambda=50,err_abs =1e-04,lambda.min.ratio =sqrt(log(p)/n),rho=10)})
print(c(p,runtime))
sum(obj5$niter)
##time performance of HiQR
rm(list=ls())
library(HiQR)
setwd('~/Dropbox/Share/HQR_ADMM/sim')
set.seed(501)
library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
library('ncvreg')
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
p=1000
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
runtime<-rep(0,3);
## glmnet
if (p<100){
runtime[1]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =sqrt(log(p)/n));})
lambda=obj$lambda
## ncvreg
runtime[2]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj1<-ncvreg(Xfull[,-1],Y,penalty ='lasso',lambda=lambda,family='gaussian',returnX =FALSE)})}
## HiQR
runtime[3]=ttime({obj5=hiqr(X0,Y,type=1,nlambda=50,err_abs =1e-04,lambda.min.ratio =sqrt(log(p)/n),rho=5)})
print(c(p,runtime))
sum(obj5$niter)
## check the estimation
# NN=length(lambda)
# for (k in 1:NN)
# {
#   A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
#   A1=(A1+t(A1))/2
#   A3=matrix(obj1$beta[,k],nrow =p)
#   A3=(A3+t(A3))/2
# A2=as.matrix(obj_new$Omega[[k]])
# print(c(max(abs(A1-A2)),max(abs(A1-A3))))
# }
# NN=length(obj5$lambda)
# for (k in 1:NN)
#    {
#   #   A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
#   #   A1=(A1+t(A1))/2
#   #A3=matrix(obj5$beta[,k],nrow =p)
#   #   A3=(A3+t(A3))/2
#   A2=as.matrix(obj5$Omega[[k]])
#   print(nnzero(A2))
#   }
##time performance of HiQR
rm(list=ls())
library(HiQR)
setwd('~/Dropbox/Share/HQR_ADMM/sim')
set.seed(99)
library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
library('ncvreg')
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
ff<-function(p){
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
runtime<-rep(0,3);
## glmnet
if (p<1000){
runtime[1]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =sqrt(2*log(p)/n));})
lambda=obj$lambda
## ncvreg
runtime[2]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj1<-ncvreg(Xfull[,-1],Y,penalty ='lasso',lambda=lambda,family='gaussian',returnX =FALSE)})}
## HiQR
runtime[3]=ttime({obj5=hiqr(X0,Y,type=1,nlambda=50,lambda.min.ratio =sqrt(2*log(p)/n))})
print(c(p,runtime,sum(obj5$niter)))
return(runtime)
}
pp<-c(100,200,400,800,1000)
Re<-sapply(rep(pp,each=1),ff)
Re
saveRDS(Re,file='time-tab2.rds')
##time performance of HiQR
rm(list=ls())
library(HiQR)
setwd('~/Dropbox/Share/HQR_ADMM/sim')
set.seed(99)
library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
library('ncvreg')
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
ff<-function(p){
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
runtime<-rep(0,3);
## glmnet
if (p<1000){
runtime[1]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =sqrt(2*log(p)/n));})
lambda=obj$lambda
## ncvreg
runtime[2]=ttime({Xfull<-t(apply(X, 1, vec2inter));
obj1<-ncvreg(Xfull[,-1],Y,penalty ='lasso',lambda=lambda,family='gaussian',returnX =FALSE)})}
## HiQR
runtime[3]=ttime({obj5=hiqr(X0,Y,type=1,nlambda=50,lambda.min.ratio =sqrt(2*log(p)/n))})
print(c(p,runtime,sum(obj5$niter)))
return(runtime)
}
pp<-c(100,200,400,800,1000)
Re<-sapply(rep(pp,each=10),ff)
Re
saveRDS(Re,file='time-tab2.rds')
rm(list=ls())
library('stargazer')
setwd('~/Dropbox/Share/HQR_ADMM/sim')
Re<-readRDS('time-tab2.rds')
pp<-c(100,200,400,800,1000)
dig=3
table<-function(obj){
m<-format(round(apply(obj,1,mean,na.rm=TRUE),dig),nsmall =dig)
s<-format(round(apply(obj,1,sd,na.rm=TRUE),dig),nsmall =dig)
l<-rep('(',length(m));
r<-rep(')',length(m));
R1=paste(m,l,s,r,sep='')
return(R1)
}
AA<-matrix(0,nrow=3,ncol=5)
for ( k in 1:length(pp))
{AA[,k]=table(Re[,(1:10)+(k-1)*10])}
colnames(AA)=c('p=100','p=200','p=400','p=800','p=1000');
rownames(AA)=c('glmnet','ncvreg','HiQR')
stargazer(AA)
##time performance of HiQR
rm(list=ls())
library(HiQR)
setwd('~/Dropbox/Share/HQR_ADMM/sim')
set.seed(99)
library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
ff<-function(p){
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
nalpha=10
nlambda =50
runtime<-rep(0,4);
## type=12 (l1+l_inf)
runtime[1]=ttime({obj12=hiqr(X0,Y,type=12,nlambda =nlambda,nalpha=nalpha)})
## type=13 (l1+l2)
runtime[2]=ttime({obj13=hiqr(X0,Y,type=13,nlambda =nlambda,nalpha=nalpha)})
## type=14 (l1+l1/l_inf)
runtime[3]=ttime({obj14=hiqr(X0,Y,type=14,nlambda =nlambda,nalpha=nalpha)})
## type=15 (l1+nuclear norm)
runtime[4]=ttime({obj15=hiqr(X0,Y,type=15,nlambda =nlambda,nalpha=nalpha)})
print(c(p,runtime))
return(runtime)
}
pp<-c(50,100,200)
Re<-sapply(rep(pp,each=1),ff)
Re
saveRDS(Re,file='time-tab3.rds')
##time performance of HiQR
rm(list=ls())
library(HiQR)
setwd('~/Dropbox/Share/HQR_ADMM/sim')
set.seed(99)
library('glmnet')
library('Matrix')
library('MASS')
library("lattice")
ttime<-function(obj)
{t1<-proc.time();
obj
t2<-as.vector(proc.time()-t1);
return(sum(t2[1:2]))}
n=500
## Generate data
ff<-function(p){
## Parameters
Sigma=toeplitz(0.5^(0:(p-1)))
Omega<-matrix(0,nrow=p+1,ncol=p+1)
Omega[2,6]=3;Omega[6,6]=-2.5;Omega[6,11]=4
Omega[1,2]=1;Omega[2,1]=1
Omega[1,11]=1;Omega[11,1]=1
X0<-mvrnorm(n,rep(0,p),Sigma)
X<-cbind(1,X0)
Y=as.vector(diag(X%*%Omega%*%t(X))+rnorm(n))
nalpha=10
nlambda =50
runtime<-rep(0,4);
## type=12 (l1+l_inf)
runtime[1]=ttime({obj12=hiqr(X0,Y,type=12,nlambda =nlambda,nalpha=nalpha)})
## type=13 (l1+l2)
runtime[2]=ttime({obj13=hiqr(X0,Y,type=13,nlambda =nlambda,nalpha=nalpha)})
## type=14 (l1+l1/l_inf)
runtime[3]=ttime({obj14=hiqr(X0,Y,type=14,nlambda =nlambda,nalpha=nalpha)})
## type=15 (l1+nuclear norm)
runtime[4]=ttime({obj15=hiqr(X0,Y,type=15,nlambda =nlambda,nalpha=nalpha)})
print(c(p,runtime))
return(runtime)
}
pp<-c(50,100,200)
Re<-sapply(rep(pp,each=10),ff)
Re
saveRDS(Re,file='time-tab3.rds')
rm(list=ls())
library('stargazer')
setwd('~/Dropbox/Share/HQR_ADMM/sim')
Re<-readRDS('time-tab3.rds')
pp<-c(50,100,200)
dig=3
table<-function(obj){
m<-format(round(apply(obj,1,mean,na.rm=TRUE),dig),nsmall =dig)
s<-format(round(apply(obj,1,sd,na.rm=TRUE),dig),nsmall =dig)
l<-rep('(',length(m));
r<-rep(')',length(m));
R1=paste(m,l,s,r,sep='')
return(R1)
}
AA<-matrix(0,nrow=3,ncol=4)
for ( k in 1:length(pp))
{AA[,k]=table(Re[,(1:10)+(k-1)*10])}
rm(list=ls())
library('stargazer')
setwd('~/Dropbox/Share/HQR_ADMM/sim')
Re<-readRDS('time-tab3.rds')
pp<-c(50,100,200)
dig=3
table<-function(obj){
m<-format(round(apply(obj,1,mean,na.rm=TRUE),dig),nsmall =dig)
s<-format(round(apply(obj,1,sd,na.rm=TRUE),dig),nsmall =dig)
l<-rep('(',length(m));
r<-rep(')',length(m));
R1=paste(m,l,s,r,sep='')
return(R1)
}
AA<-matrix(0,nrow=3,ncol=4)
for ( k in 1:length(pp))
{AA[k,]=table(Re[,(1:10)+(k-1)*10])}
rownames(AA)=c('p=50','p=100','p=200');
colnames(AA)=12:15
stargazer(AA)
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('HiQR')
n=200
p=100
X=mvrnorm(rnorm(n*p),nrow=n)
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('HiQR')
n=200
p=100
X=matrix(rnorm(n*p),nrow=n)
Y=rnorm(n)
## Ridege
obj2<-hiqr(X,Y,type=2)
rm(list = ls())
set.seed(123)
library('MASS')
library('Rcpp')
library('Matrix')
library('HiQR')
n=200
p=100
X=matrix(rnorm(n*p),nrow=n)
Y=rnorm(n)
## LASSO
obj2<-hiqr(X,Y,type=1)
## Ridege
obj2<-hiqr(X,Y,type=2)
## Ridege
obj5<-hiqr(X,Y,type=5)
## $\ell_1+\ell_2$ norm:
obj12<-hiqr(X,Y,type=12)
## $\ell_1+\ell_\infty$ norm:
obj13<-hiqr(X,Y,type=13)
## $\ell_1+\ell_1/\ell_\infty$ norm:
obj14<-hiqr(X,Y,type=14)
## $\ell_1+\ell_*$ norm:
obj15<-hiqr(X,Y,type=15)
library(HiQR)
?hiqr
library(HiQR)
?hiqr
?qr1
library(HiQR)
?hiqr
rm(list = ls())
library('HiQR')
library('glmnet')
set.seed(99)
p=100
n=200;
Omega=matrix(0,nrow=p,ncol=p);
Omega[6,6]=1
Omega[1,6]=2;Omega[6,10]=2;Omega=(Omega+t(Omega))/2;
beta<-rep(0,p);beta[c(1,6,10)]=1;
X=matrix(rnorm(n*p),nrow =n);
Y=as.vector(diag(X%*%Omega%*%t(X))+X%*%beta+rnorm(n));
obj2<-hiqr(X,Y,type=1) ##LASSO
obj2<-hiqr(X,Y,type=2) ## Ridge Regression
obj5<-hiqr(X,Y,type=5)## Reduced Rank Regression
obj12<-hiqr(X,Y,type=12) ## $\ell_1+\ell_2$ norm
obj13<-hiqr(X,Y,type=13) ## $\ell_1+\ell_\infty$ norm
obj14<-hiqr(X,Y,type=14) ## $\ell_1+\ell_1/\ell_\infty$ norm
obj15<-hiqr(X,Y,type=15) ## $\ell_1+\ell_*$ norm:
library(HiQR)
