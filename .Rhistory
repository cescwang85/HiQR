library('Matrix')
n=2000
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda.min.ratio1=0.1)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=obj_new$Omega[[k]]
print(c(norm(A1-A2,type='F')/sqrt(p),max(abs(A1-A2))))
}
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B(A==0);
B2=B(A!=0)
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(A)
return(size,sens,spec)
}
n=2000
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda.min.ratio1=0.1)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=obj_new$Omega[[k]]
print(c(norm(A1-A2,type='F')/sqrt(p),max(abs(A1-A2))))
}
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B(A==0);
B2=B(A!=0)
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(A)
return(size,sens,spec)
}
n=2000
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda.min.ratio1=0.1)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=obj_new$Omega[[k]]
print(k)
print(measure(A1,Omega))
print(measure(A2,Omega))
}
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(A)
return(size,sens,spec)
}
n=2000
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda.min.ratio1=0.1)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=obj_new$Omega[[k]]
print(k)
print(measure(A1,Omega))
print(measure(A2,Omega))
}
measure(A1,Omega)
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(A)
return(c(size,sens,spec))
}
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=obj_new$Omega[[k]]
print(k)
print(measure(A1,Omega))
print(measure(A2,Omega))
}
print(measure(Omega,A2))
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(A)
return(c(size,sens,spec))
}
n=2000
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda.min.ratio1=0.1)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=as.matrix(obj_new$Omega[[k]])
print(k)
print(measure(Omega,A1))
print(measure(Omega,A2))
}
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(B)
return(c(size,sens,spec))
}
n=2000
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda.min.ratio1=0.1)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=as.matrix(obj_new$Omega[[k]])
print(k)
print(measure(Omega,A1))
print(measure(Omega,A2))
}
A2
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(B)
return(c(size,sens,spec))
}
n=500
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda.min.ratio1=0.1)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=as.matrix(obj_new$Omega[[k]])
print(k)
print(measure(Omega,A1))
print(measure(Omega,A2))
}
plot(obj)
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(B)
return(c(size,sens,spec))
}
n=500
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.1);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda1=lambda)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=as.matrix(obj_new$Omega[[k]])
print(k)
print(measure(Omega,A1))
print(measure(Omega,A2))
}
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
spec=mean(B1==0)
sens=mean(B2!=0)
size=nnzero(B)
return(c(size,sens,spec))
}
n=500
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.05);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda1=lambda)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=as.matrix(obj_new$Omega[[k]])
print(k)
print(measure(Omega,A1))
print(measure(Omega,A2))
}
plot(obj)
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
##B is the estimation, A is true
measure<-function(A,B)
{
B1=B[A==0];
B2=B[A!=0]
sens=mean(B2!=0)
spec=mean(B1==0)
size=nnzero(B)
return(c(size,sens,spec))
}
n=500
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.05);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda1=lambda)
toc()
library(HiQR)
##check the HiQR package with L1 penalty
rm(list=ls())
library(HiQR)
set.seed(99)
library('tictoc')
library('glmnet')
library('Matrix')
n=500
p=100
## Generate data
X0<-matrix(rnorm(n*(p-1)),nrow=n)
X<-cbind(1,X0)
Omega<-matrix(0,nrow=p,ncol=p)
Omega[1:3,1:3]=rnorm(9)
Omega=(Omega+t(Omega))/2
Y<-diag(X%*%Omega%*%t(X))+rnorm(n)
##Conducting all pairs LASSO
tic('lasso-glmnet')
Xfull<-t(apply(X, 1, vec2inter));
obj<-glmnet(Xfull[,-1],Y,standardize =FALSE,nlambda=50,lambda.min.ratio =0.05);
toc()
lambda=obj$lambda
##all-pairs LASSO
tic('qr')
obj_new=hiqr(X0,Y,type=1,lambda1=lambda)
toc()
t(obj_new$niter) ##check the number of iterations
## check the estimation
NN=length(lambda)
for (k in 1:NN)
{
A1=matrix(c(obj$a0[k], obj$beta[,k]),nrow=p)
A1=(A1+t(A1))/2
A2=as.matrix(obj_new$Omega[[k]])
print(k)
print(measure(Omega,A1))
print(measure(Omega,A2))
}
